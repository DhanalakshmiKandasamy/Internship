/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bigdataanalytics;

import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ETPL-T4
 */
public class Classify extends javax.swing.JFrame {
   Connection conn;
   Statement stmt;
   ResultSet rs;
   String si;
     int ss;
       int i=0;
       int rowCount = -1;
//---
       BufferedReader br,rd;
       String str;
       FileReader fr;
       String s;
   String bmi;
    public static int stat;
    PreparedStatement ps,ps1;
    String u_name = "root";
    String u_pwd = "";
    String URL = "jdbc:mysql://localhost:3306/"; 
    String databaseName = "treatment";    
    int bavg,aavg,favg; 
    /**
     * Creates new form Classify
     */
    public Classify() {
        initComponents();
         try {
            String url = "jdbc:mysql://localhost:3306/";
            String driver = "com.mysql.jdbc.Driver";
            Class.forName(driver);
            conn = DriverManager.getConnection(url +"analytics","root", "");
            stmt = conn.createStatement();
            System.out.println("connected successfully"); 
            } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Mobile Cellular Networks");

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabel2.setText("Navie Baysian Classification");

        jButton1.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        jButton1.setText("Cl1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        jButton2.setText("Cl2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        jButton3.setText("Next");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(20, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: 
           try {
                Vector col = new Vector(); 
                Vector data = new Vector();
              System.out.println("Connected to the database");
            rs = stmt.executeQuery("select * from preprocess where Network='Mobile' ");
                ResultSetMetaData md = rs.getMetaData();
                int columns = md.getColumnCount();
                for (int i = 1; i <= columns; i++) {
                    col.addElement(md.getColumnName(i));        
                }
                while (rs.next()) {
                    Vector row = new Vector(columns);  
                    for (int i = 1; i <= columns; i++) {
                        row.addElement(rs.getObject(i));     
                    }
                    data.addElement(row);
                }
                DefaultTableModel model = new DefaultTableModel(data, col);
                jTable2.setModel(model);
                JOptionPane.showMessageDialog(null, "Results are Classified.");  

            } catch (Exception e) { 
                System.out.println(e.getMessage());     
            }
                
        try{
        stmt=conn.createStatement();
        String na="Mobile";
       rs=stmt.executeQuery("select Network from preprocess where Network='"+na+"'");
        if(rs.last())
        {
            i=rs.getRow();
            rs.beforeFirst();
        }
        jTextField1.setText(String.valueOf(i));
        }
        catch(Exception ex)
        {
            
        }
          
          
          
          
////////           try
////////       {
////////           
////////           stmt = conn.createStatement();
////////           int tot=0,count=0,avg;
////////            ResultSet rs = stmt.executeQuery("SELECT * from preprocess"); 
////////            while(rs.next())
////////            {
////////               tot=tot+Integer.parseInt(rs.getString(2)); 
////////               count++;
////////            }
////////            System.out.println("total"+tot);
////////            System.out.println("count"+count);  
////////            avg=tot/count;
////////            System.out.println("Avg" + avg);
////////            rs.close();
////////            bavg=avg;
////////       }
////////       catch(Exception e)
////////       {
////////           System.out.println(e.getMessage());
////////       }
////////       try
////////       {
////////            stmt= conn.createStatement();
////////           int tot1=0,count1=0,avg1;
////////            ResultSet rs1 = stmt.executeQuery("SELECT * from preprocess"); 
////////            while(rs1.next())
////////            {
////////               tot1=tot1+Integer.parseInt(rs1.getString(9));
////////               count1++;
////////            }
////////            System.out.println("total"+tot1);
////////            System.out.println("count"+count1);
////////            avg1=tot1/count1;
////////            System.out.println("Avg" + avg1);
////////            rs1.close();
////////            aavg=avg1;
////////       }
////////        catch(Exception e)
////////       {
////////           System.out.println(e.getMessage());
////////       }
////////       try
////////       {
////////           Statement st2 = conn.createStatement();
////////           int tot2=0,count2=0,avg2;
////////            ResultSet rs2 = st2.executeQuery("SELECT * from preprocess"); 
////////            while(rs2.next())
////////            {
////////               tot2=tot2+Integer.parseInt(rs2.getString(10)); 
////////               count2++;
////////            }
////////            System.out.println("total"+tot2);
////////            System.out.println("count"+count2);
////////            avg2=tot2/count2;
////////            System.out.println("Avg" + avg2);  
////////            rs2.close();
////////            favg=avg2;
////////       }
////////       catch(Exception e)
////////       {
////////           System.out.println(e.getMessage());
////////       }
////////        try{
////////            DefaultTableModel model=new DefaultTableModel();
////////             
////////            model.addColumn("Sno");        
////////            model.addColumn("Network");
////////            model.addColumn("Type");
////////            model.addColumn("Source");
////////            model.addColumn("Destination");
////////            model.addColumn("Noofstations");
////////            model.addColumn("Base1");
////////            model.addColumn("Base2");
////////             model.addColumn("Base3");
////////             model.addColumn("Priority");
////////           
////////            jTable2.setModel(model);
////////            stmt = conn.createStatement();
////////            ResultSet rs = stmt.executeQuery("SELECT * FROM preprocess");
////////            
////////             int i2=0;
////////             int k=0;
////////            int id=1;
////////             
////////            
////////            while(rs.next()){
////////                
////////                model.insertRow(i2, new Object[]{""});
////////                String name=rs.getString(1);
////////                int a=Integer.parseInt(rs.getString(2));
////////                int b=Integer.parseInt(rs.getString(3));
////////                int c=Integer.parseInt(rs.getString(4));
////////                int d=Integer.parseInt(rs.getString(5));
////////                int e=Integer.parseInt(rs.getString(6));
////////                float f=Float.parseFloat(rs.getString(7));
////////                float g=Float.parseFloat(rs.getString(8)); 
////////               int h=Integer.parseInt(rs.getString(9));
////////               int i=Integer.parseInt(rs.getString(10)); 
////////                if((bavg<a || aavg>h || favg>i))
////////                {
////////             model.insertRow(i2, new Object[]{""});
////////             model.setValueAt(name, i2, 0);  
////////              model.setValueAt(a, i2, 1);
////////                model.setValueAt(b, i2, 2);
////////                model.setValueAt(c, i2, 3);
////////                model.setValueAt(d, i2, 4);
////////                model.setValueAt(e, i2, 5);
////////                model.setValueAt(f, i2, 6);
////////                model.setValueAt(g, i2, 7);   
////////                model.setValueAt(h, i2, 8);
////////                model.setValueAt(i, i2, 9);  
////////                i2++;
////////                ps=conn.prepareStatement("insert into preprocess values(?,?,?,?,?,?,?,?,?,?,?)");
////////                ps.setString(1, name);
////////                ps.setInt(2, a);
////////                ps.setInt(3, b);
////////                ps.setInt(4, c);
////////                ps.setInt(5, d);
////////                ps.setInt(6, e);
////////                ps.setFloat(7, f); 
////////                ps.setFloat(8, g);
////////                ps.setInt(9, h);
////////                ps.setInt(10, i);
////////                ps.setInt(11,id);
////////                ps.executeUpdate(); 
////////                k++;
////////                id++;      }           
////////                else  
////////                {
////////                ps1=conn.prepareStatement("insert into preprocess values(?,?,?,?,?,?,?,?,?,?)");
////////                ps1.setString(1, name);    
////////                ps1.setInt(2, a);
////////                ps1.setInt(3, b); 
////////                ps1.setInt(4, c);
////////                ps1.setInt(5, d);
////////                ps1.setInt(6, e);
////////                ps1.setFloat(7, f);
////////                ps1.setFloat(8, g);
////////                ps1.setInt(9, h); 
////////                ps1.setInt(10, i);
////////                ps1.executeUpdate();  
////////               
////////                }          
////////         
////////            }
////////                   
////////               
////////            System.out.println("\n Tables"+i2);
////////             System.out.println("Inserted Successfully");
////////                    JOptionPane.showMessageDialog(this, "Patient Report Inserted Successfully");
////////            jTextField1.setText(""+k);
////////            stat=k;  
////////             
////////        }
////////        catch(Exception e){
////////            System.out.println(e.getMessage());      
////////            e.printStackTrace();
////////        }       
////////        
////////        
////////        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here: 
              try {
                Vector col = new Vector(); 
                Vector data = new Vector();    
              System.out.println("Connected to the database");
            rs = stmt.executeQuery("select * from preprocess where Network='Computer' ");
                ResultSetMetaData md = rs.getMetaData();
                int columns = md.getColumnCount();
                for (int i = 1; i <= columns; i++) { 
                    col.addElement(md.getColumnName(i));         
                }
                while (rs.next()) {
                    Vector row = new Vector(columns);  
                    for (int i = 1; i <= columns; i++) {
                        row.addElement(rs.getObject(i));     
                    }
                    data.addElement(row);
                }
                DefaultTableModel model = new DefaultTableModel(data, col);
                jTable2.setModel(model);
                JOptionPane.showMessageDialog(null, "Results are Classified.");  

            } catch (Exception e) { 
                System.out.println(e.getMessage());     
            }
         
        
        try{
        stmt=conn.createStatement();
        String na="Computer";
       rs=stmt.executeQuery("select Network from preprocess where Network='"+na+"'");
        if(rs.last())
        {
            i=rs.getRow();
            rs.beforeFirst();
        }
        jTextField1.setText(String.valueOf(i));            
        }
        catch(Exception ex)
        {
            
        }
          
          
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here: 
        
        c3 cc=new c3();
        cc.setVisible(true);
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Classify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Classify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Classify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Classify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Classify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
